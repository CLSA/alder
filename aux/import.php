#!/usr/bin/php
<?php

/**
 * Populates the interview/exam/image tables based on file lists generated using the following command:
 *   find /data/raw/clsa/<phase>/<type> -type f,l -not -empty -printf '"%p","%l","%y"\n'
 * Where <phase> is 1, 2, 3, etc and <type> is carotid_intima, dxa or retinal
 * 
 * @author Patrick Emond <emondpd@mcmaster.ca>
 */

ini_set( 'display_errors', '1' );
error_reporting( E_ALL | E_STRICT );
ini_set( 'date.timezone', 'US/Eastern' );

// if we are in the aux/ directory then back out
if( preg_match( '#/aux$#', getcwd() ) ) chdir( '..' );

if( 2 != $argc && 3 != $argc )
{
  print(
    "To import image data: <filename>\n".
    "  <filename> CSV file with no header and the following rows:\n".
    "    path: The full path to the file being imported\n".
    "    linked file: If this is a link then the linked filename\n".
    "    file type: f if this is a file, l if it is a link\n".
    "  This can be generated by using the following command:\n".
    "    find /data/raw/clsa/<phase>/<type> -type f,l -not -empty -printf '\"%p\",\"%l\",\"%y\"\\n'\n".
    "\n".
    "To import interview/exam data from Opal: <phase> <filename>\n".
    "  <phase> is the study phase (1, 2, 3, etc)\n".
    "  <filename> CSV file downloaded from Opal's alder project\n"
  );
  exit( 1 );
}

class import
{
  function fatal_error( $msg, $line )
  {
    printf( "Error on line %s:\n%s\n", $line, $msg );
    $this->db->rollback();
    die();
  }

  /**
   * Reads the framework and application settings
   */
  public function read_settings()
  {
    // include the initialization settings
    global $SETTINGS;
    require_once 'settings.ini.php';
    require_once 'settings.local.ini.php';
    require_once $SETTINGS['path']['CENOZO'].'/src/initial.class.php';
    $initial = new \cenozo\initial( true );
    $this->settings = $initial->get_settings();
    $this->cenozo_database_name =
      $this->settings['db']['database_prefix'].$this->settings['general']['framework_name'];
  }

  public function connect_database()
  {
    $server = $this->settings['db']['server'];
    $username = $this->settings['db']['username'];
    $password = $this->settings['db']['password'];
    $name = $this->settings['db']['database_prefix'] . $this->settings['general']['instance_name'];
    $this->db = new \mysqli( $server, $username, $password, $name );
    if( $this->db->connect_error ) $this->fatal_error( $this->db->connect_error, __LINE__ );
    $this->db->set_charset( 'utf8' );
    $this->db->begin_transaction();
  }

  public function disconnect_database()
  {
    $this->db->commit();
    $this->db->close();
  }

  public function import_opal_file( $study_phase, $filename )
  {
    // get the study phase ID
    $result = $this->db->query( sprintf(
      'SELECT study_phase.id '.
      'FROM %s.study_phase '.
      'JOIN %s.study ON study_phase.study_id = study.id '.
      'WHERE study.name = "clsa" '.
      'AND study_phase.rank = %d',
      $this->cenozo_database_name,
      $this->cenozo_database_name,
      $study_phase
    ) );

    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    $row = $result->fetch_array( MYSQLI_NUM );
    $result->free();
    $study_phase_id = current( $row );

    // parse the CSV file into header and row data
    $file = file_get_contents( $filename );
    $file_lines = explode( "\n", $file );
    sort( $file_lines );
    $header = [];
    $rows = [];
    foreach( $file_lines as $line )
    {
      $data = str_getcsv( $line );
      if( !$data[0] ) continue; // ignore empty lines
      else if( 'entity_id' == $data[0] )
      {
        // parse the header
        foreach( $data as $index => $column ) $header[$column] = $index;
        continue;
      }
      else
      {
        $rows[] = $data;
      }
    }

    // now determine which type of file this is based on the header
    if( array_key_exists( 'entity_id', $header ) && array_key_exists( 'barcode', $header ) )
    {
      printf( "Importing interview data found in \"%s\"\n", $filename );
      $this->import_interviews( $study_phase_id, $header, $rows );
    }
    else if( array_key_exists( 'entity_id', $header ) && array_key_exists( 'InstrumentRun.timeStart', $header ) )
    {
      // determine the scan type
      $result = $this->db->query( 'SELECT id, name FROM scan_type' );
      if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

      $scan_type_list = [];
      while( $row = $result->fetch_assoc() ) $scan_type_list[$row['name']] = $row['id'];
      $result->free();

      $scan_type_id = NULL;
      $scan_type_name = NULL;
      foreach( $scan_type_list as $name => $id )
      {
        if( preg_match( sprintf( '/%s/', $name ), $filename ) )
        {
          $scan_type_id = $id;
          $scan_type_name = $name;
          break;
        }
      }

      if( is_null( $scan_type_name ) )
      {
        printf( "No scan type found in exam filename \"%s\"\n", $filename );
      }
      else
      {
        printf( "Importing %s exam data found in \"%s\"\n", $scan_type_name, $filename );
        $this->import_exams( $study_phase_id, $scan_type_id, $scan_type_name, $header, $rows );
      }
    }
    else
    {
      printf( "Unable to determine type of data in \"%s\", please check the header\n", $filename );
    }
  }

  private function import_interviews( $study_phase_id, $header, $rows )
  {
    // build a lookup list of sites
    $result = $this->db->query( sprintf(
      'SELECT id, REPLACE( name, " DCS", "" ) AS name '.
      'FROM %s.site '.
      'WHERE name LIKE "%% DCS"',
      $this->cenozo_database_name
    ) );

    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    $site_list = [];
    while( $row = $result->fetch_assoc() ) $site_list[$row['name']] = $row['id'];
    $result->free();

    // add site name aliases
    $site_list['British Columbia'] = $site_list['University of BC'];
    $site_list['McMaster'] = $site_list['Hamilton'];

    $row_total = count( $rows );
    $new_count = 0;
    $existing_count = 0;
    foreach( $rows as $row_index => $row )
    {
      printf( "\rProcessing line %d of %d", $row_index+1, $row_total );
      flush();

      $uid = $row[$header['entity_id']];
      $token = $row[$header['barcode']];
      $start = $row[$header['startDate']];
      $end = $row[$header['endDate']];
      $site_id = $site_list[$row[$header['site']]];

      $sql = sprintf(
        'INSERT IGNORE INTO interview '.
          '(participant_id, study_phase_id, site_id, token, start_datetime, end_datetime) '.
        'SELECT '.
          'participant.id, "%s", "%s", "%s", '.
          'CONVERT_TZ("%s", "Canada/Eastern", "UTC"), '.
          'CONVERT_TZ("%s", "Canada/Eastern", "UTC") '.
        'FROM %s.participant WHERE uid = "%s"',
        $study_phase_id,
        $site_id,
        $token,
        $start,
        $end,
        $this->cenozo_database_name,
        $uid
      );

      $result = $this->db->query( $sql );
      if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

      if( 0 == $this->db->affected_rows ) $existing_count++;
      else $new_count++;
    }
    print "\n";

    printf( "Done, %d interviews added, %d ignored\n", $new_count, $existing_count );
  }

  private function import_exams( $study_phase_id, $scan_type_id, $scan_type_name, $header, $rows )
  {
    $row_total = count( $rows );
    $new_count = 0;
    $existing_count = 0;
    foreach( $rows as $row_index => $row )
    {
      printf( "\rProcessing line %d of %d", $row_index+1, $row_total );
      flush();

      $exam = [
        'uid' => $row[$header['entity_id']],
        'start' => $row[$header['InstrumentRun.timeStart']],
        'end' => $row[$header['InstrumentRun.timeEnd']],
      ];
      if( 'carotid_intima' == $scan_type_name )
      {
        $exam['type'] = 'carotid_intima';
        $exam['scan_list'] = [
          ['interviewer' => $row[$header['Measure.user_1']], 'side' => $row[$header['Measure.SIDE_1']]],
          ['interviewer' => $row[$header['Measure.user_2']], 'side' => $row[$header['Measure.SIDE_2']]],
        ];
      }
      else if( 'lateral' == $scan_type_name )
      {
        $exam['type'] = 'lateral';
        $exam['scan_list'] = [
          [
            'interviewer' => $row[$header['InstrumentRun.user']],
            'side' => $row[$header['RES_SEL_SCAN_MODE']] ? 'none' : ''
          ],
        ];
      }
      else if( 'wbody' == $scan_type_name )
      {
        $exam['type'] = 'wbody';
        $exam['scan_list'] = [
          [
            'interviewer' => $row[$header['InstrumentRun.user']],
            'side' => $row[$header['RES_WB_SCAN_MODE']] ? 'none' : ''
          ],
        ];
      }
      else if( 'hip' == $scan_type_name )
      {
        $exam['type'] = 'hip';
        $exam['scan_list'] = [
          ['interviewer' => $row[$header['Measure.user_1']], 'side' => $row[$header['Measure.OUTPUT_HIP_SIDE_1']]],
          ['interviewer' => $row[$header['Measure.user_2']], 'side' => $row[$header['Measure.OUTPUT_HIP_SIDE_2']]],
          ['interviewer' => $row[$header['Measure.user_3']], 'side' => $row[$header['Measure.OUTPUT_HIP_SIDE_3']]],
          ['interviewer' => $row[$header['Measure.user_4']], 'side' => $row[$header['Measure.OUTPUT_HIP_SIDE_4']]],
          ['interviewer' => $row[$header['Measure.user_5']], 'side' => $row[$header['Measure.OUTPUT_HIP_SIDE_5']]],
          ['interviewer' => $row[$header['Measure.user_6']], 'side' => $row[$header['Measure.OUTPUT_HIP_SIDE_6']]],
        ];
      }
      else if( 'forearm' == $scan_type_name )
      {
        $exam['type'] = 'forearm';
        $exam['scan_list'] = [
          [ 'interviewer' => $row[$header['InstrumentRun.user']], 'side' => $row[$header['OUTPUT_FA_SIDE']] ],
        ];
      }
      else if( 'retinal' == $scan_type_name )
      {
        $exam['type'] = 'retinal';
        $exam['scan_list'] = [
          ['interviewer' => $row[$header['Measure.user_1']], 'side' => $row[$header['Measure.SIDE_1']]],
          ['interviewer' => $row[$header['Measure.user_2']], 'side' => $row[$header['Measure.SIDE_2']]],
        ];
      }

      // Create the exam records
      foreach( $exam['scan_list'] as $scan )
      {
        if( 0 < strlen( $scan['side'] ) )
        {
          $sql = sprintf(
            'INSERT IGNORE INTO exam '.
              '(interview_id, scan_type_id, side, interviewer, start_datetime, end_datetime) '.
            'SELECT '.
              'interview.id, %d, "%s", "%s", '.
              'CONVERT_TZ("%s", "Canada/Eastern", "UTC"), '.
              'CONVERT_TZ("%s", "Canada/Eastern", "UTC") '.
            'FROM interview '.
            'JOIN %s.participant ON interview.participant_id = participant.id '.
            'WHERE participant.uid = "%s" '.
            'AND interview.study_phase_id = %d',
            $scan_type_id,
            $scan['side'],
            $scan['interviewer'],
            $exam['start'],
            $exam['end'],
            $this->cenozo_database_name,
            $exam['uid'],
            $study_phase_id
          );

          $result = $this->db->query( $sql );
          if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

          if( 0 == $this->db->affected_rows ) $existing_count++;
          else $new_count++;
        }
      }
    }

    printf( "\nDone, %d %s exams added, %d ignored\n", $new_count, $scan_type_name, $existing_count );
  }

  public function import_image_file( $filename )
  {
    printf( "Importing image data found in \"%s\"\n", $filename );

    // get a list of all study phases
    $result = $this->db->query(
      sprintf(
        'SELECT study_phase.id, study_phase.rank '.
        'FROM %s.study '.
        'JOIN %s.study_phase ON study.id = study_phase.study_id '.
        'WHERE study.name = "clsa"',
        $this->cenozo_database_name,
        $this->cenozo_database_name
      )
    );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    $study_phase_list = [];
    while( $row = $result->fetch_assoc() ) $study_phase_list[$row['rank']] = $row['id'];
    $result->free();

    // get a list of all scan types
    $result = $this->db->query( 'SELECT id, name FROM scan_type' );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    $scan_type_list = [];
    while( $row = $result->fetch_assoc() ) $scan_type_list[$row['id']] = $row['name'];
    $result->free();

    // create a temporary table to load image data into
    $result = $this->db->query(
      'CREATE TEMPORARY TABLE temp_image ( '.
        'id INT(10) UNSIGNED NOT NULL AUTO_INCREMENT, '.
        'study_phase_id INT(10) UNSIGNED NOT NULL, '.
        'uid CHAR(7) NOT NULL, '.
        'interview_id INT(10) UNSIGNED NULL DEFAULT NULL, '.
        'scan_type_id INT(10) UNSIGNED NOT NULL, '.
        'side ENUM("right", "left", "none") NOT NULL, '.
        'filename VARCHAR(127) NOT NULL, '.
        'link_source VARCHAR(127) NULL, '.
        'path VARCHAR(511) NOT NULL, '.
        'PRIMARY KEY ( id ), '.
        'KEY dk_study_phase_id ( study_phase_id ), '.
        'KEY dk_uid ( uid ), '.
        'KEY dk_interview_id ( interview_id ), '.
        'KEY dk_filename ( filename ), '.
        'KEY dk_link_source ( link_source )'.
      ')' 
    );  
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    // parse the CSV file into row data
    $file = file_get_contents( $filename );
    $file_lines = explode( "\n", $file );
    sort( $file_lines );
    $rows = [];
    foreach( $file_lines as $line )
    {
      $data = str_getcsv( $line );
      if( !$data[0] ) continue; // ignore empty lines
      else $rows[] = $data;
    }

    $row_total = count( $rows );
    $file_list = [];
    $temp_image_rows = [];
    foreach( $rows as $row_index => $row )
    {
      printf( "\rProcessing line %d of %d", $row_index+1, $row_total );
      flush();

      $path = $row[0];
      $filename = basename( $path );
      $directory = dirname( $path );
      $link_source = $row[1];
      $is_link = 'l' == $row[2];

      // determine which scan type the image belongs to based on the path
      $scan_type_id = NULL;
      foreach( $scan_type_list as $id => $name )
      {
        if( preg_match( sprintf( '/%s/', $name ), $path ) )
        {
          $scan_type_id = $id;
          break;
        }
      }

      if( is_null( $scan_type_id ) ) continue;

      // get the phase and UID from the path
      $matches = NULL;
      preg_match( '#/([0-9]+)/([^/]+)/([A-Z][0-9]{6})/#', $path, $matches );
      $phase = $matches[1];
      $type = $matches[2];
      $uid = $matches[3];

      // get teh side from the filename
      $matches = NULL;
      $side = preg_match( '#(right|left)#', $filename, $matches ) ? $matches[0] : 'none';

      $temp_image_rows[] = sprintf(
        '(%d, "%s", %d, "%s", "%s", %s, "%s")',
        $study_phase_list[$phase],
        $uid,
        $scan_type_id,
        $side,
        $filename,
        $link_source ? sprintf( '"%s"', $link_source ) : 'NULL',
        $path
      );
    }
    print "\n";

    printf( "Reading data into a temporary table\n" );

    $sql = sprintf(
      'INSERT IGNORE INTO temp_image (study_phase_id, uid, scan_type_id, side, filename, link_source, path) '.
      'VALUES %s',
      implode( ',', $temp_image_rows )
    );
    $result = $this->db->query( $sql );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    // remove all links which do not have a referring file (it must have filesize 0 if it's missing)
    printf( "Removing links pointing to empty files\n" );
    $result = $this->db->query(
      'DELETE FROM temp_image WHERE id IN( '.
        'SELECT link.id '.
        'FROM temp_image AS link '.
        'LEFT JOIN temp_image AS file '.
        'ON link.study_phase_id = file.study_phase_id '.
        'AND link.uid = file.uid '.
        'AND link.link_source = file.filename '.
        'WHERE file.id IS NULL '.
        'AND link.link_source IS NOT NULL '.
      ')'
    );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    // remove all files that are represented by links
    printf( "Removing files pointed to by links\n" );
    $result = $this->db->query(
      'DELETE FROM temp_image WHERE id IN ( '.
        'SELECT file.id '.
        'FROM temp_image AS link '.
        'JOIN temp_image AS file '.
          'ON link.study_phase_id = file.study_phase_id '.
          'AND link.uid = file.uid '.
          'AND link.link_source = file.filename '.
        'WHERE link.link_source IS NOT NULL '.
      ')'
    );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    // determine the interview_id for all images
    printf( "Linking images to interviews\n" );
    $result = $this->db->query( sprintf(
      'UPDATE temp_image '.
      'JOIN %s.participant ON temp_image.uid = participant.uid '.
      'JOIN interview '.
        'ON participant.id = interview.participant_id '.
        'AND temp_image.study_phase_id = interview.study_phase_id '.
      'SET temp_image.interview_id = interview.id',
      $this->cenozo_database_name
    ) );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    // transfer the remaining data from the temp_image table to the image table
    printf( "Writing new image records\n" );
    $result = $this->db->query(
      'INSERT IGNORE INTO image (exam_id, path) '.
      'SELECT exam.id, path '.
      'FROM temp_image '.
      'JOIN interview ON temp_image.interview_id = interview.id '.
      'JOIN exam '.
        'ON interview.id = exam.interview_id '.
        'AND temp_image.scan_type_id = exam.scan_type_id'
    );
    if( false === $result ) $this->fatal_error( $this->db->error, __LINE__ );

    printf(
      "Done, %d images added, %d ignored\n",
      $this->db->affected_rows,
      $temp_image_total - $this->db->affected_rows
    );
  }
}

$import = new import();
$import->read_settings();
$import->connect_database();
if( 2 == $argc ) $import->import_image_file( $argv[1] );
else if( 3 == $argc ) $import->import_opal_file( $argv[1], $argv[2] );
$import->disconnect_database();
